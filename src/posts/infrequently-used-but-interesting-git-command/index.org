#+TITLE: 一些不常使用但有趣的 Git 命令
#+KEYWORDS: 珊瑚礁上的程序员, git, git command
#+DATE: <2022-11-23 Wed 14:00>

** 判断分支是否已经合并到主干

#+begin_src shell
  # 判断第一个分支是其他分支的祖先吗
  git merge-base --is-ancestor your/feature-brance origin/master
#+end_src

该命令不会有任何输出, 如果 "是"，返回值为 "0"; 如果不是，返回值为 "1".

=gitlab= 上查看分支列表时，对于已合并的分支会有一个 =merged= 的标签，maybe 就是用这种方式实现的。

** 删除所有已合并到主干的分支

#+begin_src shell
  # 删除本地分支
  git branch --merged | xargs git branch -d
  # 删除远程分支
  git branch -r --merged | sed 's/origin\///' | xargs -I {} git push origin :{}
#+end_src

** 忽略项目中某些文件, 但不放在 .gitignore 文件中

在团队合作的项目中, 你使用了某些大家不常用的工具等，可能会在项目根目录下生成一些配置文件等。

因为不常用，所以极大概率没有加入到 =.gitignore= 文件中。
为了避免提交代码时受到这些文件的困扰（误提交）,我们可以在本地忽略掉这些文件。

#+begin_src shell
  echo "/your-some-file" >> .git/info/exclude
#+end_src

参考：[[https://git-scm.com/docs/gitignore][gitignore]]

** 比较本地文件和某[远程]分支上的文件差异

#+begin_src shell
  git diff origin/dev -- path/to/filename
#+end_src

** 使用 =git-hooks= 设置受保护的分支(禁止推送)

在团队开发中, 一般都有权限管理的, 比如 =master= 分支只允许 Team Leader 点合并。
开发者是没有权限直接推送到 =master= 分支的。

但作为 Team Leader, 即便有权限直接推送到 =master= 分支, 最佳实践还是不要这么干的好。
更可怕的是，今天由于误操作，将还在开发中的代码直接 push 到了 =master= 分支, 惊出一身冷汗。

为了避免再次发生这种情况，可通过 =.git/hooks/pre-push= 来实现禁止推送到某些受保护的分支。

#+begin_src shell
  #!/bin/sh

  # An example hook script to verify what is about to be pushed.  Called by "git
  # push" after it has checked the remote status, but before anything has been
  # pushed.  If this script exits with a non-zero status nothing will be pushed.
  #
  # This hook is called with the following parameters:
  #
  # $1 -- Name of the remote to which the push is being done
  # $2 -- URL to which the push is being done
  #
  # If pushing without using a named remote those arguments will be equal.
  #
  # Information about the commits which are being pushed is supplied as lines to
  # the standard input in the form:
  #
  #   <local ref> <local oid> <remote ref> <remote oid>

  remote="$1"
  url="$2"

  protected_branch="main"
  protected_remote_ref="refs/heads/${protected_branch}"
  while read local_ref local_oid remote_ref remote_oid
  do
      # echo "$local_ref" "$local_oid" "$remote_ref" "$remote_oid"
      if test "$remote_ref" = "$protected_remote_ref"
      then
          echo >&2 "分支 ${protected_branch} 为受保护的分支, 不允许推送"
          exit 1
      fi
  done

  exit 0
#+end_src

** 本地忽略已提交文件的后续变更

对于新创建的文件, 加入 =.gitignore= 中即可实现忽略。
但这种方式仅针对新创建的(从未提交过的)文件生效。
比如，项目中的 =Dockerfile= 文件，本身是需要跟着版本库走的，
且开发，测试，预发布和生产四个环境下的配置可能略有差异（需要指定当前开发环境）。
每次开始开发新需求，都需要从 =master= 分支拉取最新代码，然后修改 =Dockerfile= 将 =--env=prod= 修改为 =--env=dev= .
开发完成需要发布到测试环境时同样需要修改 =Dockerfile= 将 =--env=dev= 修改为 =--env=test= .
发布到预发布和生产时，同样需要执行这些操作，非常不便。
尤其是到预发布后发现的问题，需要重新回到 开发，测试 等环节，再经历这么一遍。

为了解决这个问题，思路很简单，就是本地开发环境对 =Dockerfile= 文件的修改仅保留在本地，不提交到远程。
这样本地对该文件的修改就不会提交到远程的开发分支，当合并到 测试，预发布，生产等环境时，也就不存在覆盖的问题，各个环境保留各个环境原有的配置即可。
为了达到这个目的，可以使用：
#+begin_src shell
  # 告诉Git忽略对文件的修改，即使文件已经被修改，Git也不会将其标记为已修改
  git update-index --assume-unchange Dockerfile
#+end_src

这个时候再执行 =git status= 命令，会发现该文件并没有被修改的标记。

当然，如果后续确实有修改 =Dockerfile= 的需求，
可以再执行：
#+begin_src shell
  git update-index --no-assume-unchange Dockerfile
#+end_src
来恢复对 =Dockerfile= 文件变动的检查。

** 切换到上一个分支

#+begin_src shell
  git checkout -
#+end_src

** 移除指定源文件中行尾的空白字符

#+begin_src shell
  sed -i -E 's/\s+$//' $(git ls-files '*.cpp' '*.h')
  # 或者使用更强大的 git grep 来搜索文件
  sed -i -E '...' $(git grep -lw Foo '*.cpp' '*.h')
#+end_src

** 查看分支的最后一次提交时间

#+begin_src shell
  # 所有分支, 按照最后提交时间正序排列
  git for-each-ref --sort=committerdate refs/heads/ \
      --format='%(committerdate:short) %(refname:short)'
  # 获取最近更新的5个分支名
  git for-each-ref --sort=committerdate refs/heads/ \
      --format='%(committerdate:short) %(refname:short)' | tail -5 | cut -c 12-
  # 列出最近更新的 5 个分支名
  git for-each-ref --sort=-committerdate --count=5 --format='%(refname:short) %(committerdate:relative)' refs/heads/
#+end_src

=git for-each-ref= 命令可用于列出和显示各种类型的引用，例如分支、标签、远程跟踪分支等。
同时可以使用不同的选项来过滤和格式化输出。

以下是一些常用的参数：
-  =--format=<format>= : 指定输出的格式。可以使用占位符来引用不同的字段。例如  =%d=  表示引用的类型， =%H=  表示引用的完整哈希值， =%s=  表示引用的简短描述等。
-  =--sort=<key>= : 指定排序的键。可以使用不同的键来按照不同的方式排序引用。例如  =refname=  按引用名称排序， =committerdate=  按提交时间排序等。可以使用  =-=  来表示降序排序。
-  =--count=<n>= : 限制输出的数量，只显示前 n 个引用。
-  =--merged=<commit>= : 仅显示已合并到指定提交的引用。
-  =--no-merged=<commit>= : 仅显示未合并到指定提交的引用。
-  =--contains=<commit>= : 仅显示包含指定提交的引用。
-  =--points-at=<object>= : 仅显示指向指定对象的引用。
-  =--merged-with=<commit>= : 仅显示与指定提交合并的引用。
-  =--no-merged-with=<commit>= : 仅显示与指定提交未合并的引用。
-  =--format=<format>= : 指定输出的格式。可以使用占位符来引用不同的字段。例如  =%d=  表示引用的类型， =%H=  表示引用的完整哈希值， =%s=  表示引用的简短描述等。
-  =--points-at=<object>= : 仅显示指向指定对象的引用。
-  =--contains=<commit>= : 仅显示包含指定提交的引用。
-  =--merged-with=<commit>= : 仅显示与指定提交合并的引用。
-  =--no-merged-with=<commit>= : 仅显示与指定提交未合并的引用。
